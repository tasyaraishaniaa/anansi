1. B
2. B
3. B
4. C
5. B

6. In Kotlin, listOf() creates an immutable list, meaning its contents cannot be modified after creation. On the other hand, mutableListOf() creates a mutable list that allows elements to be added, removed, or updated. Use listOf() when you need a fixed set of items, and mutableListOf() when you need a dynamic list that can change during the program's execution.
7. You can suspend a coroutine using the suspend keyword in a function and common suspending functions like delay().
8. The onPause() method runs when the activity stops being in the foreground. After the onPause() method has run, the activity is still visible but doesn't have the focus.
9. RecyclerView makes it easy to efficiently display large sets of data. You supply the data and define how each item looks, and the RecyclerView library dynamically creates the elements when they're needed. As the name implies, RecyclerView recycles those individual elements.
10. Room simplifies database operations in Android. It offers: Compile-time query checks. Less boilerplate code.
11. Retrofit is a popular Android library that simplifies network requests. It allows developers to define API endpoints as simple Java interfaces with annotations, making it easier to interact with RESTful APIs.
12. The onCreate() method is where any initialization code should go, as this method always gets called after the activity has launched and before it starts running. An activity is running when it's visible in the foreground and the user can interact with it. This is where an activity spends most of its life.
13. LiveData notifies Observer objects when underlying data changes. You can consolidate your code to update the UI in these Observer objects. That way, you don't need to update the UI every time the app data changes because the observer does it for you.
14. Setting the android:configChanges attribute in the <activity> tag of AndroidManifest. xml is a common way to handle orientation changes. By using this feature, all of your views and data will remain intact during an orientation change and your activities won't be recreated.
15. Kotlin coroutines are generally more efficient and easier to use than threads and are well-suited for async programming tasks such as making network requests. On the other hand, threads are better suited for concurrent programming, where multiple tasks need to be run simultaneously.

16. No
17. Yes
18. Yes
19. Yes
20. Yes

21.
    val myList = mutableListOf(1, 2, 3)
    myList.add(4)
22.
    suspend fun myFunction() {
        delay(1000L)
        println("Completed")
    }
23.
    val map = mutableMapOf(1 to "One", 2 to "Two")
    map[3] = "Three"
24.
    val intent = Intent(this, SecondActivity::class.java)
    startActivity(intent)
25.
    val view = findViewById<Button>(R.id.myButton)
    view.setOnClickListener { 
        Toast.makeText(this, "Button clicked", Toast.LENGTH_SHORT).show() 
    }
26.
    fun add(a: Int, b: Int): Int {
        return a + b
    }

    val result = add(5, 10)
27.
    override fun onSaveInstanceState(outState: Bundle) {
        outState.putInt("KEY", 1)
    }

    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        val key = savedInstanceState.getInt("KEY")
    }
28.
    val textView = findViewById<TextView>(R.id.textView)
    textView.text = getString(R.string.app_name)
29.
    val job = GlobalScope.async {
        delay(1000L)
        "Hello"
    }

    val result = runBlocking {
        job.await()
    }
30.
    fun networkRequest() {
        val url = URL("https://example.com")
        val connection = url.openConnection() as HttpURLConnection
        connection.RequestMethod("POST")
    }

Story-Based Question
class UserAdapter(private val userList: List<User>) : RecyclerView.Adapter<UserAdapter.UserViewHolder>() {

    class UserViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UserViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.user_item, parent, false)
        return UserViewHolder(view)
    }

    override fun onBindViewHolder(holder: UserViewHolder, position: Int) {
        val user = userList[position]
        holder.itemView.findViewById<TextView>(R.id.userName).text = user.name
    }

    override fun getItemCount(): Int = userList.size
}